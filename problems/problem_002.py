from datetime import datetime

from shared.log_helpers import LogHelper

logger = LogHelper.get_logger(__name__)


def calculate(largest_num):
    """
    Each new term in the Fibonacci sequence is generated by adding the previous two terms.
    By starting with 1 and 2, the first terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89
    By considering the terms in the Fibonacci sequence whose values do not exceed four million,
    find the sum of the even-valued terms.
    """
    fib_sequence = [1, 2]
    fib_even_sum = 2
    current_index = 1

    # We don't seem to need any fancy mathematics here, as brute-force calculation is tolerably
    # quick (<1 ms)
    # TODO: for later problems, we might find it necessary to build a function to generate
    #   a fibonacci sequence
    start_time = datetime.now()
    while fib_even_sum < largest_num:
        next_sequence = fib_sequence[current_index] + fib_sequence[current_index - 1]
        fib_sequence.append(next_sequence)
        current_index += 1
        # TODO: don't love the double-check < largest_num (once at the while loop and once here)
        fib_even_sum += next_sequence if next_sequence % 2 == 0 and next_sequence < largest_num else 0
    end_time = datetime.now()

    logger.info('Project Euler 002: %s in %s', fib_even_sum, end_time - start_time)

    return fib_even_sum


if __name__ == "__main__":
    calculate(4*10**6)
